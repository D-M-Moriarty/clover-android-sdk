/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getPng png}</li>
 * <li>{@link #getUrlString urlString}</li>
 * <li>{@link #getExternalPrintJobId externalPrintJobId}</li>
 * <li>{@link #getPrinter printer}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class ImagePrintMessage extends com.clover.sdk.v3.remotemessage.Message {

  /**
   * An image serialized to a base64 encoded byte array
   */
  public java.nio.ByteBuffer getPng() {
    return genClient.cacheGet(CacheKey.png);
  }

  /**
   * The url of an image.  The url must be accessible from the Clover device.
   */
  public java.lang.String getUrlString() {
    return genClient.cacheGet(CacheKey.urlString);
  }

  /**
   * External print job ID assigned to this request
   */
  public java.lang.String getExternalPrintJobId() {
    return genClient.cacheGet(CacheKey.externalPrintJobId);
  }

  /**
   * Printer to which the print job should be routed.
   */
  public com.clover.sdk.v3.printer.Printer getPrinter() {
    return genClient.cacheGet(CacheKey.printer);
  }

  /**
   * The list of message types
   */
  @Override
  public com.clover.sdk.v3.remotemessage.Method getMethod() {
    return genClient.cacheGet(CacheKey.method);
  }

  /**
   * The version of this message
   */
  @Override
  public java.lang.Integer getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<ImagePrintMessage> {
    png {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractOther("png", java.nio.ByteBuffer.class);
      }
    },
    urlString {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractOther("urlString", java.lang.String.class);
      }
    },
    externalPrintJobId {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractOther("externalPrintJobId", java.lang.String.class);
      }
    },
    printer {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractRecord("printer", com.clover.sdk.v3.printer.Printer.JSON_CREATOR);
      }
    },
    method {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractEnum("method", com.clover.sdk.v3.remotemessage.Method.class);
      }
    },
    version {
      @Override
      public Object extractValue(ImagePrintMessage instance) {
        return instance.genClient.extractOther("version", java.lang.Integer.class);
      }
    },
      ;
  }

  private GenericClient<ImagePrintMessage> genClient;

  /**
  * Constructs a new empty instance.
  */
  public ImagePrintMessage() {
    super(false);
    genClient = new GenericClient<ImagePrintMessage>(this);
    this.setMethod(com.clover.sdk.v3.remotemessage.Method.PRINT_IMAGE);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected ImagePrintMessage(boolean noInit) {
    super(false);
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public ImagePrintMessage(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public ImagePrintMessage(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public ImagePrintMessage(ImagePrintMessage src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'png' field is set and is not null */
  public boolean isNotNullPng() {
    return genClient.cacheValueIsNotNull(CacheKey.png);
  }

  /** Checks whether the 'urlString' field is set and is not null */
  public boolean isNotNullUrlString() {
    return genClient.cacheValueIsNotNull(CacheKey.urlString);
  }

  /** Checks whether the 'externalPrintJobId' field is set and is not null */
  public boolean isNotNullExternalPrintJobId() {
    return genClient.cacheValueIsNotNull(CacheKey.externalPrintJobId);
  }

  /** Checks whether the 'printer' field is set and is not null */
  public boolean isNotNullPrinter() {
    return genClient.cacheValueIsNotNull(CacheKey.printer);
  }

  /** Checks whether the 'method' field is set and is not null */
  @Override
  public boolean isNotNullMethod() {
    return genClient.cacheValueIsNotNull(CacheKey.method);
  }

  /** Checks whether the 'version' field is set and is not null */
  @Override
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }



  /** Checks whether the 'png' field has been set, however the value could be null */
  public boolean hasPng() {
    return genClient.cacheHasKey(CacheKey.png);
  }

  /** Checks whether the 'urlString' field has been set, however the value could be null */
  public boolean hasUrlString() {
    return genClient.cacheHasKey(CacheKey.urlString);
  }

  /** Checks whether the 'externalPrintJobId' field has been set, however the value could be null */
  public boolean hasExternalPrintJobId() {
    return genClient.cacheHasKey(CacheKey.externalPrintJobId);
  }

  /** Checks whether the 'printer' field has been set, however the value could be null */
  public boolean hasPrinter() {
    return genClient.cacheHasKey(CacheKey.printer);
  }

  /** Checks whether the 'method' field has been set, however the value could be null */
  @Override
  public boolean hasMethod() {
    return genClient.cacheHasKey(CacheKey.method);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  @Override
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }


  /**
   * Sets the field 'png'.
   */
  public ImagePrintMessage setPng(java.nio.ByteBuffer png) {
    return genClient.setOther(png, CacheKey.png);
  }

  /**
   * Sets the field 'urlString'.
   */
  public ImagePrintMessage setUrlString(java.lang.String urlString) {
    return genClient.setOther(urlString, CacheKey.urlString);
  }

  /**
   * Sets the field 'externalPrintJobId'.
   */
  public ImagePrintMessage setExternalPrintJobId(java.lang.String externalPrintJobId) {
    return genClient.setOther(externalPrintJobId, CacheKey.externalPrintJobId);
  }

  /**
   * Sets the field 'printer'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public ImagePrintMessage setPrinter(com.clover.sdk.v3.printer.Printer printer) {
    return genClient.setRecord(printer, CacheKey.printer);
  }

  /**
   * Sets the field 'method'.
   */
  @Override
  public Message setMethod(com.clover.sdk.v3.remotemessage.Method method) {
    return genClient.setOther(method, CacheKey.method);
  }

  /**
   * Sets the field 'version'.
   */
  @Override
  public Message setVersion(java.lang.Integer version) {
    return genClient.setOther(version, CacheKey.version);
  }


  /** Clears the 'png' field, the 'has' method for this field will now return false */
  public void clearPng() {
    genClient.clear(CacheKey.png);
  }
  /** Clears the 'urlString' field, the 'has' method for this field will now return false */
  public void clearUrlString() {
    genClient.clear(CacheKey.urlString);
  }
  /** Clears the 'externalPrintJobId' field, the 'has' method for this field will now return false */
  public void clearExternalPrintJobId() {
    genClient.clear(CacheKey.externalPrintJobId);
  }
  /** Clears the 'printer' field, the 'has' method for this field will now return false */
  public void clearPrinter() {
    genClient.clear(CacheKey.printer);
  }
  /** Clears the 'method' field, the 'has' method for this field will now return false */
  @Override
  public void clearMethod() {
    genClient.clear(CacheKey.method);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  @Override
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public ImagePrintMessage copyChanges() {
    ImagePrintMessage copy = new ImagePrintMessage();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(ImagePrintMessage src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new ImagePrintMessage(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<ImagePrintMessage> CREATOR = new android.os.Parcelable.Creator<ImagePrintMessage>() {
    @Override
    public ImagePrintMessage createFromParcel(android.os.Parcel in) {
      ImagePrintMessage instance = new ImagePrintMessage(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public ImagePrintMessage[] newArray(int size) {
      return new ImagePrintMessage[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<ImagePrintMessage> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<ImagePrintMessage>() {
    @Override
    public ImagePrintMessage create(org.json.JSONObject jsonObject) {
      return new ImagePrintMessage(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean PNG_IS_REQUIRED = false;
    public static final boolean URLSTRING_IS_REQUIRED = false;
    public static final boolean EXTERNALPRINTJOBID_IS_REQUIRED = false;
    public static final boolean PRINTER_IS_REQUIRED = false;
    public static final boolean METHOD_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;

  }

}
