/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getId id}</li>
 * <li>{@link #getType type}</li>
 * <li>{@link #getPackageName packageName}</li>
 * <li>{@link #getMethod method}</li>
 * <li>{@link #getPayload payload}</li>
 * <li>{@link #getRemoteSourceSDK remoteSourceSDK}</li>
 * <li>{@link #getRemoteApplicationID remoteApplicationID}</li>
 * <li>{@link #getVersion version}</li>
 * <li>{@link #getFragmentIndex fragmentIndex}</li>
 * <li>{@link #getLastFragment lastFragment}</li>
 * <li>{@link #getAttachmentEncoding attachmentEncoding}</li>
 * <li>{@link #getAttachment attachment}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class RemoteMessage extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Identifier for the message
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  public com.clover.sdk.v3.remotemessage.RemoteMessageType getType() {
    return genClient.cacheGet(CacheKey.type);
  }

  /**
   * The package name of the sending Clover api
   */
  public java.lang.String getPackageName() {
    return genClient.cacheGet(CacheKey.packageName);
  }

  /**
   * The name of the business message being sent
   */
  public com.clover.sdk.v3.remotemessage.Method getMethod() {
    return genClient.cacheGet(CacheKey.method);
  }

  /**
   * The payload message being sent.  Interpreted based on the method.
   */
  public java.lang.String getPayload() {
    return genClient.cacheGet(CacheKey.payload);
  }

  /**
   * The identifier for the source SDK.  This identifies the connector.
   */
  public java.lang.String getRemoteSourceSDK() {
    return genClient.cacheGet(CacheKey.remoteSourceSDK);
  }

  /**
   * The identifier for the sending application.  This identifies the app.
   */
  public java.lang.String getRemoteApplicationID() {
    return genClient.cacheGet(CacheKey.remoteApplicationID);
  }

  /**
   * The Remote Message version.
   */
  public java.lang.Integer getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }

  /**
   * The order of fragments when message is split for large attachments.
   */
  public java.lang.Integer getFragmentIndex() {
    return genClient.cacheGet(CacheKey.fragmentIndex);
  }

  /**
   * If this is the final fragment in a series.
   */
  public java.lang.Boolean getLastFragment() {
    return genClient.cacheGet(CacheKey.lastFragment);
  }

  /**
   * The type of encoding used for the attachment, typically BASE64.
   */
  public java.lang.String getAttachmentEncoding() {
    return genClient.cacheGet(CacheKey.attachmentEncoding);
  }

  /**
   * The encoded attachment.
   */
  public java.lang.String getAttachment() {
    return genClient.cacheGet(CacheKey.attachment);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<RemoteMessage> {
    id {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("id", java.lang.String.class);
      }
    },
    type {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractEnum("type", com.clover.sdk.v3.remotemessage.RemoteMessageType.class);
      }
    },
    packageName {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("packageName", java.lang.String.class);
      }
    },
    method {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractEnum("method", com.clover.sdk.v3.remotemessage.Method.class);
      }
    },
    payload {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("payload", java.lang.String.class);
      }
    },
    remoteSourceSDK {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("remoteSourceSDK", java.lang.String.class);
      }
    },
    remoteApplicationID {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("remoteApplicationID", java.lang.String.class);
      }
    },
    version {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("version", java.lang.Integer.class);
      }
    },
    fragmentIndex {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("fragmentIndex", java.lang.Integer.class);
      }
    },
    lastFragment {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("lastFragment", java.lang.Boolean.class);
      }
    },
    attachmentEncoding {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("attachmentEncoding", java.lang.String.class);
      }
    },
    attachment {
      @Override
      public Object extractValue(RemoteMessage instance) {
        return instance.genClient.extractOther("attachment", java.lang.String.class);
      }
    },
      ;
  }

  private GenericClient<RemoteMessage> genClient;

  /**
  * Constructs a new empty instance.
  */
  public RemoteMessage() {
    genClient = new GenericClient<RemoteMessage>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected RemoteMessage(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public RemoteMessage(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public RemoteMessage(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public RemoteMessage(RemoteMessage src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateLength(getId(), 13);
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'type' field is set and is not null */
  public boolean isNotNullType() {
    return genClient.cacheValueIsNotNull(CacheKey.type);
  }

  /** Checks whether the 'packageName' field is set and is not null */
  public boolean isNotNullPackageName() {
    return genClient.cacheValueIsNotNull(CacheKey.packageName);
  }

  /** Checks whether the 'method' field is set and is not null */
  public boolean isNotNullMethod() {
    return genClient.cacheValueIsNotNull(CacheKey.method);
  }

  /** Checks whether the 'payload' field is set and is not null */
  public boolean isNotNullPayload() {
    return genClient.cacheValueIsNotNull(CacheKey.payload);
  }

  /** Checks whether the 'remoteSourceSDK' field is set and is not null */
  public boolean isNotNullRemoteSourceSDK() {
    return genClient.cacheValueIsNotNull(CacheKey.remoteSourceSDK);
  }

  /** Checks whether the 'remoteApplicationID' field is set and is not null */
  public boolean isNotNullRemoteApplicationID() {
    return genClient.cacheValueIsNotNull(CacheKey.remoteApplicationID);
  }

  /** Checks whether the 'version' field is set and is not null */
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }

  /** Checks whether the 'fragmentIndex' field is set and is not null */
  public boolean isNotNullFragmentIndex() {
    return genClient.cacheValueIsNotNull(CacheKey.fragmentIndex);
  }

  /** Checks whether the 'lastFragment' field is set and is not null */
  public boolean isNotNullLastFragment() {
    return genClient.cacheValueIsNotNull(CacheKey.lastFragment);
  }

  /** Checks whether the 'attachmentEncoding' field is set and is not null */
  public boolean isNotNullAttachmentEncoding() {
    return genClient.cacheValueIsNotNull(CacheKey.attachmentEncoding);
  }

  /** Checks whether the 'attachment' field is set and is not null */
  public boolean isNotNullAttachment() {
    return genClient.cacheValueIsNotNull(CacheKey.attachment);
  }



  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'type' field has been set, however the value could be null */
  public boolean hasType() {
    return genClient.cacheHasKey(CacheKey.type);
  }

  /** Checks whether the 'packageName' field has been set, however the value could be null */
  public boolean hasPackageName() {
    return genClient.cacheHasKey(CacheKey.packageName);
  }

  /** Checks whether the 'method' field has been set, however the value could be null */
  public boolean hasMethod() {
    return genClient.cacheHasKey(CacheKey.method);
  }

  /** Checks whether the 'payload' field has been set, however the value could be null */
  public boolean hasPayload() {
    return genClient.cacheHasKey(CacheKey.payload);
  }

  /** Checks whether the 'remoteSourceSDK' field has been set, however the value could be null */
  public boolean hasRemoteSourceSDK() {
    return genClient.cacheHasKey(CacheKey.remoteSourceSDK);
  }

  /** Checks whether the 'remoteApplicationID' field has been set, however the value could be null */
  public boolean hasRemoteApplicationID() {
    return genClient.cacheHasKey(CacheKey.remoteApplicationID);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }

  /** Checks whether the 'fragmentIndex' field has been set, however the value could be null */
  public boolean hasFragmentIndex() {
    return genClient.cacheHasKey(CacheKey.fragmentIndex);
  }

  /** Checks whether the 'lastFragment' field has been set, however the value could be null */
  public boolean hasLastFragment() {
    return genClient.cacheHasKey(CacheKey.lastFragment);
  }

  /** Checks whether the 'attachmentEncoding' field has been set, however the value could be null */
  public boolean hasAttachmentEncoding() {
    return genClient.cacheHasKey(CacheKey.attachmentEncoding);
  }

  /** Checks whether the 'attachment' field has been set, however the value could be null */
  public boolean hasAttachment() {
    return genClient.cacheHasKey(CacheKey.attachment);
  }


  /**
   * Sets the field 'id'.
   */
  public RemoteMessage setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'type'.
   */
  public RemoteMessage setType(com.clover.sdk.v3.remotemessage.RemoteMessageType type) {
    return genClient.setOther(type, CacheKey.type);
  }

  /**
   * Sets the field 'packageName'.
   */
  public RemoteMessage setPackageName(java.lang.String packageName) {
    return genClient.setOther(packageName, CacheKey.packageName);
  }

  /**
   * Sets the field 'method'.
   */
  public RemoteMessage setMethod(com.clover.sdk.v3.remotemessage.Method method) {
    return genClient.setOther(method, CacheKey.method);
  }

  /**
   * Sets the field 'payload'.
   */
  public RemoteMessage setPayload(java.lang.String payload) {
    return genClient.setOther(payload, CacheKey.payload);
  }

  /**
   * Sets the field 'remoteSourceSDK'.
   */
  public RemoteMessage setRemoteSourceSDK(java.lang.String remoteSourceSDK) {
    return genClient.setOther(remoteSourceSDK, CacheKey.remoteSourceSDK);
  }

  /**
   * Sets the field 'remoteApplicationID'.
   */
  public RemoteMessage setRemoteApplicationID(java.lang.String remoteApplicationID) {
    return genClient.setOther(remoteApplicationID, CacheKey.remoteApplicationID);
  }

  /**
   * Sets the field 'version'.
   */
  public RemoteMessage setVersion(java.lang.Integer version) {
    return genClient.setOther(version, CacheKey.version);
  }

  /**
   * Sets the field 'fragmentIndex'.
   */
  public RemoteMessage setFragmentIndex(java.lang.Integer fragmentIndex) {
    return genClient.setOther(fragmentIndex, CacheKey.fragmentIndex);
  }

  /**
   * Sets the field 'lastFragment'.
   */
  public RemoteMessage setLastFragment(java.lang.Boolean lastFragment) {
    return genClient.setOther(lastFragment, CacheKey.lastFragment);
  }

  /**
   * Sets the field 'attachmentEncoding'.
   */
  public RemoteMessage setAttachmentEncoding(java.lang.String attachmentEncoding) {
    return genClient.setOther(attachmentEncoding, CacheKey.attachmentEncoding);
  }

  /**
   * Sets the field 'attachment'.
   */
  public RemoteMessage setAttachment(java.lang.String attachment) {
    return genClient.setOther(attachment, CacheKey.attachment);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'type' field, the 'has' method for this field will now return false */
  public void clearType() {
    genClient.clear(CacheKey.type);
  }
  /** Clears the 'packageName' field, the 'has' method for this field will now return false */
  public void clearPackageName() {
    genClient.clear(CacheKey.packageName);
  }
  /** Clears the 'method' field, the 'has' method for this field will now return false */
  public void clearMethod() {
    genClient.clear(CacheKey.method);
  }
  /** Clears the 'payload' field, the 'has' method for this field will now return false */
  public void clearPayload() {
    genClient.clear(CacheKey.payload);
  }
  /** Clears the 'remoteSourceSDK' field, the 'has' method for this field will now return false */
  public void clearRemoteSourceSDK() {
    genClient.clear(CacheKey.remoteSourceSDK);
  }
  /** Clears the 'remoteApplicationID' field, the 'has' method for this field will now return false */
  public void clearRemoteApplicationID() {
    genClient.clear(CacheKey.remoteApplicationID);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }
  /** Clears the 'fragmentIndex' field, the 'has' method for this field will now return false */
  public void clearFragmentIndex() {
    genClient.clear(CacheKey.fragmentIndex);
  }
  /** Clears the 'lastFragment' field, the 'has' method for this field will now return false */
  public void clearLastFragment() {
    genClient.clear(CacheKey.lastFragment);
  }
  /** Clears the 'attachmentEncoding' field, the 'has' method for this field will now return false */
  public void clearAttachmentEncoding() {
    genClient.clear(CacheKey.attachmentEncoding);
  }
  /** Clears the 'attachment' field, the 'has' method for this field will now return false */
  public void clearAttachment() {
    genClient.clear(CacheKey.attachment);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public RemoteMessage copyChanges() {
    RemoteMessage copy = new RemoteMessage();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(RemoteMessage src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new RemoteMessage(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<RemoteMessage> CREATOR = new android.os.Parcelable.Creator<RemoteMessage>() {
    @Override
    public RemoteMessage createFromParcel(android.os.Parcel in) {
      RemoteMessage instance = new RemoteMessage(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public RemoteMessage[] newArray(int size) {
      return new RemoteMessage[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<RemoteMessage> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<RemoteMessage>() {
    @Override
    public RemoteMessage create(org.json.JSONObject jsonObject) {
      return new RemoteMessage(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;
    public static final boolean TYPE_IS_REQUIRED = false;
    public static final boolean PACKAGENAME_IS_REQUIRED = false;
    public static final boolean METHOD_IS_REQUIRED = false;
    public static final boolean PAYLOAD_IS_REQUIRED = false;
    public static final boolean REMOTESOURCESDK_IS_REQUIRED = false;
    public static final boolean REMOTEAPPLICATIONID_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;
    public static final boolean FRAGMENTINDEX_IS_REQUIRED = false;
    public static final boolean LASTFRAGMENT_IS_REQUIRED = false;
    public static final boolean ATTACHMENTENCODING_IS_REQUIRED = false;
    public static final boolean ATTACHMENT_IS_REQUIRED = false;

  }

}
