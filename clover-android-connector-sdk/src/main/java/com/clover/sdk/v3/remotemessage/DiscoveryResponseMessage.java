/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getMerchantId merchantId}</li>
 * <li>{@link #getMerchantName merchantName}</li>
 * <li>{@link #getMerchantMId merchantMId}</li>
 * <li>{@link #getName name}</li>
 * <li>{@link #getSerial serial}</li>
 * <li>{@link #getModel model}</li>
 * <li>{@link #getReady ready}</li>
 * <li>{@link #getSupportsTipAdjust supportsTipAdjust}</li>
 * <li>{@link #getSupportsManualRefund supportsManualRefund}</li>
 * <li>{@link #getSupportsMultiPayToken supportsMultiPayToken}</li>
 * <li>{@link #getSupportsAcknowledgement supportsAcknowledgement}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class DiscoveryResponseMessage extends com.clover.sdk.v3.remotemessage.Message {

  public java.lang.String getMerchantId() {
    return genClient.cacheGet(CacheKey.merchantId);
  }

  public java.lang.String getMerchantName() {
    return genClient.cacheGet(CacheKey.merchantName);
  }

  public java.lang.String getMerchantMId() {
    return genClient.cacheGet(CacheKey.merchantMId);
  }

  public java.lang.String getName() {
    return genClient.cacheGet(CacheKey.name);
  }

  public java.lang.String getSerial() {
    return genClient.cacheGet(CacheKey.serial);
  }

  public java.lang.String getModel() {
    return genClient.cacheGet(CacheKey.model);
  }

  public java.lang.Boolean getReady() {
    return genClient.cacheGet(CacheKey.ready);
  }

  public java.lang.Boolean getSupportsTipAdjust() {
    return genClient.cacheGet(CacheKey.supportsTipAdjust);
  }

  public java.lang.Boolean getSupportsManualRefund() {
    return genClient.cacheGet(CacheKey.supportsManualRefund);
  }

  public java.lang.Boolean getSupportsMultiPayToken() {
    return genClient.cacheGet(CacheKey.supportsMultiPayToken);
  }

  public java.lang.Boolean getSupportsAcknowledgement() {
    return genClient.cacheGet(CacheKey.supportsAcknowledgement);
  }

  /**
   * The list of message types
   */
  @Override
  public com.clover.sdk.v3.remotemessage.Method getMethod() {
    return genClient.cacheGet(CacheKey.method);
  }

  /**
   * The version of this message
   */
  @Override
  public java.lang.Integer getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<DiscoveryResponseMessage> {
    merchantId {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("merchantId", java.lang.String.class);
      }
    },
    merchantName {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("merchantName", java.lang.String.class);
      }
    },
    merchantMId {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("merchantMId", java.lang.String.class);
      }
    },
    name {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("name", java.lang.String.class);
      }
    },
    serial {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("serial", java.lang.String.class);
      }
    },
    model {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("model", java.lang.String.class);
      }
    },
    ready {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("ready", java.lang.Boolean.class);
      }
    },
    supportsTipAdjust {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("supportsTipAdjust", java.lang.Boolean.class);
      }
    },
    supportsManualRefund {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("supportsManualRefund", java.lang.Boolean.class);
      }
    },
    supportsMultiPayToken {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("supportsMultiPayToken", java.lang.Boolean.class);
      }
    },
    supportsAcknowledgement {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("supportsAcknowledgement", java.lang.Boolean.class);
      }
    },
    method {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractEnum("method", com.clover.sdk.v3.remotemessage.Method.class);
      }
    },
    version {
      @Override
      public Object extractValue(DiscoveryResponseMessage instance) {
        return instance.genClient.extractOther("version", java.lang.Integer.class);
      }
    },
      ;
  }

  private GenericClient<DiscoveryResponseMessage> genClient;

  /**
  * Constructs a new empty instance.
  */
  public DiscoveryResponseMessage() {
    super(false);
    genClient = new GenericClient<DiscoveryResponseMessage>(this);
    this.setMethod(com.clover.sdk.v3.remotemessage.Method.DISCOVERY_RESPONSE);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected DiscoveryResponseMessage(boolean noInit) {
    super(false);
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public DiscoveryResponseMessage(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public DiscoveryResponseMessage(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public DiscoveryResponseMessage(DiscoveryResponseMessage src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'merchantId' field is set and is not null */
  public boolean isNotNullMerchantId() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantId);
  }

  /** Checks whether the 'merchantName' field is set and is not null */
  public boolean isNotNullMerchantName() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantName);
  }

  /** Checks whether the 'merchantMId' field is set and is not null */
  public boolean isNotNullMerchantMId() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantMId);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return genClient.cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'serial' field is set and is not null */
  public boolean isNotNullSerial() {
    return genClient.cacheValueIsNotNull(CacheKey.serial);
  }

  /** Checks whether the 'model' field is set and is not null */
  public boolean isNotNullModel() {
    return genClient.cacheValueIsNotNull(CacheKey.model);
  }

  /** Checks whether the 'ready' field is set and is not null */
  public boolean isNotNullReady() {
    return genClient.cacheValueIsNotNull(CacheKey.ready);
  }

  /** Checks whether the 'supportsTipAdjust' field is set and is not null */
  public boolean isNotNullSupportsTipAdjust() {
    return genClient.cacheValueIsNotNull(CacheKey.supportsTipAdjust);
  }

  /** Checks whether the 'supportsManualRefund' field is set and is not null */
  public boolean isNotNullSupportsManualRefund() {
    return genClient.cacheValueIsNotNull(CacheKey.supportsManualRefund);
  }

  /** Checks whether the 'supportsMultiPayToken' field is set and is not null */
  public boolean isNotNullSupportsMultiPayToken() {
    return genClient.cacheValueIsNotNull(CacheKey.supportsMultiPayToken);
  }

  /** Checks whether the 'supportsAcknowledgement' field is set and is not null */
  public boolean isNotNullSupportsAcknowledgement() {
    return genClient.cacheValueIsNotNull(CacheKey.supportsAcknowledgement);
  }

  /** Checks whether the 'method' field is set and is not null */
  @Override
  public boolean isNotNullMethod() {
    return genClient.cacheValueIsNotNull(CacheKey.method);
  }

  /** Checks whether the 'version' field is set and is not null */
  @Override
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }



  /** Checks whether the 'merchantId' field has been set, however the value could be null */
  public boolean hasMerchantId() {
    return genClient.cacheHasKey(CacheKey.merchantId);
  }

  /** Checks whether the 'merchantName' field has been set, however the value could be null */
  public boolean hasMerchantName() {
    return genClient.cacheHasKey(CacheKey.merchantName);
  }

  /** Checks whether the 'merchantMId' field has been set, however the value could be null */
  public boolean hasMerchantMId() {
    return genClient.cacheHasKey(CacheKey.merchantMId);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return genClient.cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'serial' field has been set, however the value could be null */
  public boolean hasSerial() {
    return genClient.cacheHasKey(CacheKey.serial);
  }

  /** Checks whether the 'model' field has been set, however the value could be null */
  public boolean hasModel() {
    return genClient.cacheHasKey(CacheKey.model);
  }

  /** Checks whether the 'ready' field has been set, however the value could be null */
  public boolean hasReady() {
    return genClient.cacheHasKey(CacheKey.ready);
  }

  /** Checks whether the 'supportsTipAdjust' field has been set, however the value could be null */
  public boolean hasSupportsTipAdjust() {
    return genClient.cacheHasKey(CacheKey.supportsTipAdjust);
  }

  /** Checks whether the 'supportsManualRefund' field has been set, however the value could be null */
  public boolean hasSupportsManualRefund() {
    return genClient.cacheHasKey(CacheKey.supportsManualRefund);
  }

  /** Checks whether the 'supportsMultiPayToken' field has been set, however the value could be null */
  public boolean hasSupportsMultiPayToken() {
    return genClient.cacheHasKey(CacheKey.supportsMultiPayToken);
  }

  /** Checks whether the 'supportsAcknowledgement' field has been set, however the value could be null */
  public boolean hasSupportsAcknowledgement() {
    return genClient.cacheHasKey(CacheKey.supportsAcknowledgement);
  }

  /** Checks whether the 'method' field has been set, however the value could be null */
  @Override
  public boolean hasMethod() {
    return genClient.cacheHasKey(CacheKey.method);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  @Override
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }


  /**
   * Sets the field 'merchantId'.
   */
  public DiscoveryResponseMessage setMerchantId(java.lang.String merchantId) {
    return genClient.setOther(merchantId, CacheKey.merchantId);
  }

  /**
   * Sets the field 'merchantName'.
   */
  public DiscoveryResponseMessage setMerchantName(java.lang.String merchantName) {
    return genClient.setOther(merchantName, CacheKey.merchantName);
  }

  /**
   * Sets the field 'merchantMId'.
   */
  public DiscoveryResponseMessage setMerchantMId(java.lang.String merchantMId) {
    return genClient.setOther(merchantMId, CacheKey.merchantMId);
  }

  /**
   * Sets the field 'name'.
   */
  public DiscoveryResponseMessage setName(java.lang.String name) {
    return genClient.setOther(name, CacheKey.name);
  }

  /**
   * Sets the field 'serial'.
   */
  public DiscoveryResponseMessage setSerial(java.lang.String serial) {
    return genClient.setOther(serial, CacheKey.serial);
  }

  /**
   * Sets the field 'model'.
   */
  public DiscoveryResponseMessage setModel(java.lang.String model) {
    return genClient.setOther(model, CacheKey.model);
  }

  /**
   * Sets the field 'ready'.
   */
  public DiscoveryResponseMessage setReady(java.lang.Boolean ready) {
    return genClient.setOther(ready, CacheKey.ready);
  }

  /**
   * Sets the field 'supportsTipAdjust'.
   */
  public DiscoveryResponseMessage setSupportsTipAdjust(java.lang.Boolean supportsTipAdjust) {
    return genClient.setOther(supportsTipAdjust, CacheKey.supportsTipAdjust);
  }

  /**
   * Sets the field 'supportsManualRefund'.
   */
  public DiscoveryResponseMessage setSupportsManualRefund(java.lang.Boolean supportsManualRefund) {
    return genClient.setOther(supportsManualRefund, CacheKey.supportsManualRefund);
  }

  /**
   * Sets the field 'supportsMultiPayToken'.
   */
  public DiscoveryResponseMessage setSupportsMultiPayToken(java.lang.Boolean supportsMultiPayToken) {
    return genClient.setOther(supportsMultiPayToken, CacheKey.supportsMultiPayToken);
  }

  /**
   * Sets the field 'supportsAcknowledgement'.
   */
  public DiscoveryResponseMessage setSupportsAcknowledgement(java.lang.Boolean supportsAcknowledgement) {
    return genClient.setOther(supportsAcknowledgement, CacheKey.supportsAcknowledgement);
  }

  /**
   * Sets the field 'method'.
   */
  @Override
  public Message setMethod(com.clover.sdk.v3.remotemessage.Method method) {
    return genClient.setOther(method, CacheKey.method);
  }

  /**
   * Sets the field 'version'.
   */
  @Override
  public Message setVersion(java.lang.Integer version) {
    return genClient.setOther(version, CacheKey.version);
  }


  /** Clears the 'merchantId' field, the 'has' method for this field will now return false */
  public void clearMerchantId() {
    genClient.clear(CacheKey.merchantId);
  }
  /** Clears the 'merchantName' field, the 'has' method for this field will now return false */
  public void clearMerchantName() {
    genClient.clear(CacheKey.merchantName);
  }
  /** Clears the 'merchantMId' field, the 'has' method for this field will now return false */
  public void clearMerchantMId() {
    genClient.clear(CacheKey.merchantMId);
  }
  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    genClient.clear(CacheKey.name);
  }
  /** Clears the 'serial' field, the 'has' method for this field will now return false */
  public void clearSerial() {
    genClient.clear(CacheKey.serial);
  }
  /** Clears the 'model' field, the 'has' method for this field will now return false */
  public void clearModel() {
    genClient.clear(CacheKey.model);
  }
  /** Clears the 'ready' field, the 'has' method for this field will now return false */
  public void clearReady() {
    genClient.clear(CacheKey.ready);
  }
  /** Clears the 'supportsTipAdjust' field, the 'has' method for this field will now return false */
  public void clearSupportsTipAdjust() {
    genClient.clear(CacheKey.supportsTipAdjust);
  }
  /** Clears the 'supportsManualRefund' field, the 'has' method for this field will now return false */
  public void clearSupportsManualRefund() {
    genClient.clear(CacheKey.supportsManualRefund);
  }
  /** Clears the 'supportsMultiPayToken' field, the 'has' method for this field will now return false */
  public void clearSupportsMultiPayToken() {
    genClient.clear(CacheKey.supportsMultiPayToken);
  }
  /** Clears the 'supportsAcknowledgement' field, the 'has' method for this field will now return false */
  public void clearSupportsAcknowledgement() {
    genClient.clear(CacheKey.supportsAcknowledgement);
  }
  /** Clears the 'method' field, the 'has' method for this field will now return false */
  @Override
  public void clearMethod() {
    genClient.clear(CacheKey.method);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  @Override
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public DiscoveryResponseMessage copyChanges() {
    DiscoveryResponseMessage copy = new DiscoveryResponseMessage();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(DiscoveryResponseMessage src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new DiscoveryResponseMessage(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<DiscoveryResponseMessage> CREATOR = new android.os.Parcelable.Creator<DiscoveryResponseMessage>() {
    @Override
    public DiscoveryResponseMessage createFromParcel(android.os.Parcel in) {
      DiscoveryResponseMessage instance = new DiscoveryResponseMessage(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public DiscoveryResponseMessage[] newArray(int size) {
      return new DiscoveryResponseMessage[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<DiscoveryResponseMessage> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<DiscoveryResponseMessage>() {
    @Override
    public DiscoveryResponseMessage create(org.json.JSONObject jsonObject) {
      return new DiscoveryResponseMessage(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean MERCHANTID_IS_REQUIRED = false;
    public static final boolean MERCHANTNAME_IS_REQUIRED = false;
    public static final boolean MERCHANTMID_IS_REQUIRED = false;
    public static final boolean NAME_IS_REQUIRED = false;
    public static final boolean SERIAL_IS_REQUIRED = false;
    public static final boolean MODEL_IS_REQUIRED = false;
    public static final boolean READY_IS_REQUIRED = false;
    public static final boolean SUPPORTSTIPADJUST_IS_REQUIRED = false;
    public static final boolean SUPPORTSMANUALREFUND_IS_REQUIRED = false;
    public static final boolean SUPPORTSMULTIPAYTOKEN_IS_REQUIRED = false;
    public static final boolean SUPPORTSACKNOWLEDGEMENT_IS_REQUIRED = false;
    public static final boolean METHOD_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;

  }

}
